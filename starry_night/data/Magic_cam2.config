# This is a config file for the Magic allsky cam
[properties]
useConfAfter = 2014-04-08 03:45
name = Magic
longitude = -17.8761
latitude = 28.7594
elevation = 2200
timeOffset = -2
url = http://www.magic.iac.es/site/weather/AllSkyCurrentImage.JPG
timeFormat = magic_allskyimage_%Y%m%d_%H%M%S

[crop]
crop_X = 190, 90, 375
crop_Y = 530, 205, 220
crop_Radius = 150, 60, 275
crop_DeleteInside = 1, 1, 0


[image]
zenith_X = 368.3
zenith_Y = 222.8
azimuthOffset = 91.4
radius = 304
resolution = 640, 480
openingAngle = 75
angleProjection = lin

[calibration]
airmass_absorbtion = 0.

[SQL]
connection = mysql+pymysql://jadam:{}@localhost:3307/Magic
table = magic_test 

[analysis]
points_of_interest = example_sources.csv
poi_radius = 10
minAngleToMoon = 20
moonExposureFactor = 3.5
pixelTolerance = 3
minAngleBetweenStars = 1.
vmagLimit = 4.4
visibleUpperLimit = -0.270,  -0.600
visibleLowerLimit = 0.000,  -2.000
kernelSize = 1.9

# Explanation:
#
# PROPERTIES [general settings]
# name: Camera name. Think of something nice and place it here. We only use this in few cases like naming the output file.
# longitude: Enter longitude of camera position as float.
# latitude: Enter latitude of camera position as float.
# elevation: Enter elevation of camera above sea level as float in meter.
# timeOffset: Sometimes the timestamp of an image does not match the actual image time. Here you can enter an offset that will be added to the timestamp before it will be used for calculation. E.g.: image is named: 2016-01-01_15:00:00.jpg and timeOffset is = -7.5 results in time being used: 2016-01-01_14:52:30
# url: URL to download the current image from. You only need this if you don't want to provide images from disk.
# timeformat: time format string used for parsing the image time from the image. This not needed for fits and matlab files as we expect them to have the time information stored as a data key.
#
# CROP [settings for cropping unwanted image content]
# Since we are working with fish-eye lenses, only circular cropping is supported. Please enter x and y position of the center and radius of the circle (integer) and also a 0 or 1 to determine whether the inside oder outside of the circle should be removed. If you want to remove multiple sections, just append more x,y,... values separated by a ','.
# crop_X: see above
# crop_Y: see above
# crop_Radius: see above
# crop_DeleteInside: see above
#
# IMAGE [information used for coordinate transformation]
# zenith_X: x pixel position of the zenith in the image.
# zenith_Y: y pixel position of the zenith in the image.
# azimuthOffset: angular position of the dec=0 line. Values [0,360]. We start right and counter clock wise. As an approximation just look at the polaris star. If azOffset=0 polaris is to the right of the zenith, if azOffset=90 it is above the zenith.
# radius: scaling of altitude angle on pixel coordinate. Enter here the distance in pixel from the image zenith to the 90° zenith angle (float)
# resolution: tuple of image resolution. This is only used to make sure that you are using the right config file for your processing.
# openingAngle: All objects with a zenith angle greater than this value will be removed from the analysis. This makes sure that only stars get used that are above the horizon (maybe there are mountains around you) and you can decide to limit your observation to a low zenith angle where the star detection is very robust. Use a value <90.0
# angleProjection: Funktion used for transformation: radius(altitude). Your only options here are 'lin' (linear) and everything else will be treated as 'nonLin' which is some cosine function (look into source code)
#
# CALIBRATION: [more specific analysis]
# airmass_absorbtion: Because of atmospheric extinction stars with a big zenith angle appear darker. e**(-airmass_absorbtion*X) describes this behavior where airAbsorbtion is close to 0.5 in clear nights and X is the airmass we are looking through.
#
# SQL [SQL server config]
# connection: see pymysql.create_engine() for details. Replace your password with '{}', we will provide you a prompt to type it in during runtime.
# table: table name
#
# ANALYSIS [parameters for the analysis]
# points_of_interest: path to a csv file that contains Ra and Dec positions where you are interested in the cloudiness. Each row must contain: name, ID, ra, dec, radius. Name is name of the position (string), ID is a unique integer >=0 that identifies this position, ra and dec are rectaszension and declination of the position in degree [0,360] [90,-90]
# poi_radius: stars inside 'poi_radius' will be used for the analysis. Radius is in degree, I suggest using 10 as default value.
# minAngleToMoon: remove objects closer to the moon than this value
# minAngleBetweenStars: only used by the 'configure' script. Provide a star catalogue and all stars that lie closer than this angle to a brighter star get removed. 1° is a good value for us because we need some tolerance to detect a star and this can result in mistaking one star for a brighter one if they are to close.
#
